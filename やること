・action "dblclick" "rclick" "wait" とか諸々ついか　あとでいいけど
・make_function_instanceの無限ループ対策
・どうにかPatternオブジェクトはOKというところまで来た。あとはast側でどうloopに直すかのみ。
    = 使われるオブジェクト側のデータ構造はOKなので、解析側の実装のみ。でも、これはまあ根気よくやってくしかなくない？
    あ、あれそういえばloop内で複数パターン呼び出してるときってどうするんだ…？
    patternどうしで直積とんなきゃいけないのか…。これはloopの問題だよね…。つまり、loopの下に持つべき要素なのよ。
    でも、そうするとloopのdefinitionとinstanceみたいにわけなきゃいけない…忘れてた。
    うーんでも…おかしいよねそれは…。いやつまりloopの下にpatternがあって、その下に直積ができるはずなんだけど、paternは
    loopに直すことができるから…という。それは上下関係がおかしい。
    とすると、loopの上のオブジェクトをつくるか、ast側で責任持って上手にastを作る必要がある。というか、簡単に言うとastの下に直積表がくる。
    パターンの。
・runtimeの作成
・main_routineの作成（ついにブラウザ操作ライブラリを使うタイミングが…！）
・yamlの受け取り
ここまでを3/21中に終わらせたい…できなくても再来週の休日中には…！
・リファクタリング
    特にregex_patternのリファクタリング
・デバッグ削除
・テストの作成
・__ast.pyをast.pyにしたい
・READMEのさくせい
今月中までにやろう

指示書設計
    選択できるオブジェクトと
    クリック、セレクト等の操作に分ける
    　→オブジェクト指向を意識して作る？
    　→でもインターフェースを作って、実装をポリモルフィズムで変えて…とかが必要と思えない
        　スーパーセットとかいらんでしょと

    そう考えると簡単に書ける、かつイテレートが簡単というところが重要か
    awkは行志向だけど…ていうかイテレートってなにに対して？

    やりたいことは簡単に書ける、かつパターンを取るのが容易というところでは。
    じゃあ、パターンって何？
    パターンは、例えばこのチェックボックスにはチェックを入れるけど、こっち入れない、とか。
    あとは何らか同じ性質を持ったものを全てチェックするとか。
    そういう操作のときには、たとえばボタンAを押したらこの画面に進むから、これを選択して
    ボタンAを押したら、前の画面に戻って、ボタンBを押して、押したらまた前の画面に戻って…としたいはず。

    ということはこれをプログラミング言語で書くと
    for(index=0; index <= something.length; i++){
        click(some_buttons[i])
        click("もどる")
    }
    というふうにしたい。

    ということは、何に対してイテレートするかって言うと、ある同様の性質をもった集合に入れられる
    オブジェクトが、イテレートの集合となる。（それはまあ当たり前と言えば当たり前？）
    集合のラベルとしてつけられるのは、例えばある要素の下に在るもの、とか。（こっちが重要？）
    （このtableタグの下に在るもの、とか）
    あとはチェックボックスのオンオフ、やセレクトボックスのoptionsとか。
    あとクリックしたい対象の集合とか。
    ["前に戻る","次に進む"]
    イテレートの対象は操作の対象にする配列でいいと。

    しかし、じゃあイテレートの対象にするのは上記のような集合でいいとして（かつ、集合の記法も一旦無視）
    ここからここの範囲でイテレートするという判断が必要になる。
    つまり、イテレートには始点と終点が必要になる。
    この画面でパターンを取りたい、みたいなことがある。
    その時、多くの場合始点はこの画面に入る、終点はこの画面に出る、という操作であり、その中でイテレートしたい
    オブジェクトの集合を記載する必要が在る。(とはいえ、実際〜をクリックしてから〜をクリックするまで、の範囲でパターンを取る) 
    ということは、制御構文を導入しなければいけない。
    そもそもが、〜をクリックする、その次に…という順番が存在する時点で制御構文は在ると言える（んじゃないのか多分）。 
　通常の集合（無順序）ではない順序集合になっている。
    まあとにかく、ある時点からある時点の操作の間で、イテレートしたい集合を書いてもらって、
    その中でパターンを作成する。

ymlのファイルをastに変えることの意義について
    要は、なんで既に木構造になっているデータを、また木構造のデータにかえるの？と。
    一個には、各要素にとって必要な情報（配下となる要素）に対して、アクセスしやすくすることが意義なのでは？
    キャッシュすること。例えば、Loop以下にある、iteratableなオブジェクトをすぐに提示してくださいs、
    と言われた時に、すぐに差し出せる、とかさ。
    あとはまあこれによって可能なパターンはなんですか？とかさ。
    要は、データへのaccessibilityを高めることが目的なんじゃないの？それは多分正しいな。
    例えば、こういうOperation渡した時に、やるべき、優先されるべきOperationは何？とか。
    Minimalに、必要な情報のみにアクセスできる方法を提供することがastとOperation_Elementsの役割では？
    そうだね…accessibility。そこに集中しよう。
    色んな情報をキャッシュして持っておいてよ、と。スタティックでいいから。と。

loop以下について
    loop以下は以下のようにパターンテーブルを作る。
    まず、実行前解析
        loop以下のイテレータブルなpatternを全てキャッシュし、直積を取る
            =>これでiteratableなpatternのリストは完成。
            =>何をするかが決まるので、その下にどのようなObjectsがいるかも決定できる
        loop以下のイテレータブルなobjectsを全てキャッシュし、直積を取る
            =>iteratableなオブジェクトのリストは(半分くらい)完成
    次に実行時解析
        loopを一回回した後、iteratableなオブジェクトのリストと
        patternのリストで直積を取る
            =>iteratableなtableの完成
            =>とはいえ、
